grammar com.ino9dev.Ltml with org.eclipse.xtext.common.Terminals
generate ltml "http://www.ino9dev.com/Ltml"

Model:
    statements+=Statement*;

Statement:
    Manifest
    |LoadTest
    |LoadGroup
    |LoadGenerator
    |Script
    |DataTable
    |SL_COMMENT
    |Run
;

Manifest:
    ("Manifest"|"Mn")
    "{"
        "Id" name=ID
        ("Name" manifestname=STRING)?
        ("Version"|"ver") version=STRING
        ("InstanceType" instancetype=InstanceType)?
        ("ModelInstancedPath" modelinstancedpath=STRING)?
        ("Corpname" corpname=STRING)?
    "}"
;

LoadTest:
    ("LoadTest"|"Lt")
    "{"
        "Id" name=ID
        ("Name" loadtestname=STRING)?
        ("Purpose" purpose=STRING)?
        //per loadtest schedule
        "LoadGroups" loadgroups+=[LoadGroup](',' loadgroups+=[LoadGroup])*
        (schedule=Schedule)?
        report=Report
    "}"
;

LoadGroup:
    ("LoadGroup"|"Lgrp")
    "{"
        "Id" name=ID
        ("Name" loadgroupname=STRING)?
        ("ConccurentCount"|"Cc") cc=INT
        "Script" script=[Script]
        "Iteration" iteration=("INFINITY"|STRING)
        "LoadGenerator" loadgenerator=[LoadGenerator]
        "RampUp" rampup=STRING
        // per loadgroup schedule
        (schedule=Schedule)?
    "}"
;

LoadGenerator:
    ("LoadGenerator"|"Lgen")
    "{"
        "Id" name=ID
        ("Name" loadgeneratorname=STRING)?
        "TargetIp" ip=IPADDRESS
        "TargetPort" port=STRING //todo PORT
        "Region" region=STRING
        "AuthUsername" username=STRING
        "AuthPassword" password=STRING
    "}"
;

Schedule:
    "Schedule"
    "{"
        (
        "Start" start=STRING
        "End" end=STRING
        |
        "Duration" duration=INT
        "Delay" delay=INT
        )
    "}"
;

Script:
    ("Script"|"Sc")
    "{"
        "Id" name=ID
        "Name" scriptname=STRING
        ("Transactions"|"Trs") 
        "{"
            (transactions+=Transaction)*
        "}"
        ("DataTable" datatable+=[DataTable]("," datatable+=[DataTable])*)?
    "}"
;

Transaction:
    ("Transaction" | "Tr")
    "{"
        "Id" name=ID
        "Name" transactionanme=STRING
        "Protocol" protocol=Protocol
        ("Port" port=INT)?
        "Method" method=Method
        "Server" server=(STRING|IPADDRESS)
        "Path" path=STRING
        ("ConnectTimeout" connecttimeout=INT)?
        ("ResponseTimeout" responsetimeout=INT)?
        ("RequestParameters" "["
            param+=Param*   
         "]"|"Body" body=STRING)?
        (responsehandler+=ResponseHandler)*
        ("CaptureFileName" capturefilename=STRING)?
        ("ResponseExpected" text=STRING ("Exist"|"NotExist"|"Included"))?
    "}"
;

ResponseHandler:
    "ResponseHandler"
    "{"
        "Id" name=ID
        "Name" responsehandlername=STRING
        "Protocol" protocol=Protocol
        "QueryType" querytype=QueryType
        "QueryString" querystring=STRING
        "Ordinal" ordinal=INT
        "SearchLocation" searchlocation=SearchLocation
    "}"
;

DataTable:
    "DataTable"
    "{"
        "Id" name=ID
        "Name" namefordatatable=STRING
        "EncodingType" encodingtype=ENCODINGTYPE
        "Delimiter" delimiter=STRING
        "Type" type=DATATABLETYPE
        "Layout" layout+=STRING(","layout+=STRING)*
        "Path" path=STRING
        "AsignMode" asignmode=ASIGNMODE
        "ShareMode" sharemode=SHAREMODE
    "}"
;

Report:
    "Report"
    "{"
        (noreport?="NoReport"|
            (summary?="Summary"
             ("Result" resultpath=STRING)?)
             (hps?="HitPerSecond"
              |tps?="TransactionPerSecond"
              |resptime?="ResponseTime"
              |cc?="ConccurentCount"
              |checkresponse?="CheckResponse")*
        )
    "}"
;

Param:
    key=STRING"="value=STRING
;

/**
 * for only interpreter use
 **/
Run:
    "Run" target=STRING
;

terminal IPADDRESS:
    ('1'..'2''0'..'9''0'..'9'
     |'1'..'9''0'..'9'
     |'1'..'9')'.'
    ('1'..'2''0'..'9''0'..'9'
     |'1'..'9''0'..'9'
     |'1'..'9')'.'
    ('1'..'2''0'..'9''0'..'9'
     |'1'..'9''0'..'9'
     |'1'..'9')'.'
    ('1'..'2''0'..'9''0'..'9'
     |'1'..'9''0'..'9'
     |'1'..'9')
;

enum QueryType:
    REGEX="REGEX"
    |XPATH="XPATH"
    |CSS="CSS"
;

enum SearchLocation:
    HEADER="HEADER"
    |BODY="BODY"
;

enum Method:
    GET="GET"
    |POST="POST"
    |DELETE="DELETE"
    |PUT="PUT"
    |OPTION="OPTION"
;

enum InstanceType:
    JMETER="JMeter"
    |LOADRUNNER="LoadRunner"
;

enum Protocol:
    HTTP="HTTP"
    |HTTPS="HTTPS"
    |SMTP="SMTP"
    |FTP="FTP"
    //others when if those are needed
;

 enum DATATABLETYPE:
     datatabletype="CSV"
     |datatabletype="TSV"
     //others whe if those are needed
 ;
 
 enum ASIGNMODE:
     ITERATION="ITERATION"
     |RANDOM="RANDOM"
     |UNIQUE="UNIQUE"
     //others whe if those are needed
 ;
 
 enum SHAREMODE:
     ALLTHREAD="ALLTHREAD"
 ;
 
 enum ENCODINGTYPE:
     SHIFTJIS="SHIFT_JIS"
     |UTF8="UTF-8"
 ;